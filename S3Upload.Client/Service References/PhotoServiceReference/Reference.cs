//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S3Upload.Client.PhotoServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoInfo", Namespace="http://schemas.datacontract.org/2004/07/S3Upload.Service.Contracts")]
    [System.SerializableAttribute()]
    public partial class PhotoInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoUrl {
            get {
                return this.PhotoUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoUrlField, value) != true)) {
                    this.PhotoUrlField = value;
                    this.RaisePropertyChanged("PhotoUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoServiceReference.IPhotoService")]
    public interface IPhotoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhoto", ReplyAction="http://tempuri.org/IPhotoService/GetPhotoResponse")]
        S3Upload.Client.PhotoServiceReference.PhotoInfo GetPhoto(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhoto", ReplyAction="http://tempuri.org/IPhotoService/GetPhotoResponse")]
        System.Threading.Tasks.Task<S3Upload.Client.PhotoServiceReference.PhotoInfo> GetPhotoAsync(int id);
        
        // CODEGEN: Generating message contract since the operation UploadPhoto is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UploadPhoto", ReplyAction="http://tempuri.org/IPhotoService/UploadPhotoResponse")]
        S3Upload.Client.PhotoServiceReference.UploadPhotoResponse UploadPhoto(S3Upload.Client.PhotoServiceReference.PhotoUpload request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UploadPhoto", ReplyAction="http://tempuri.org/IPhotoService/UploadPhotoResponse")]
        System.Threading.Tasks.Task<S3Upload.Client.PhotoServiceReference.UploadPhotoResponse> UploadPhotoAsync(S3Upload.Client.PhotoServiceReference.PhotoUpload request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PhotoUpload", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PhotoUpload {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public PhotoUpload() {
        }
        
        public PhotoUpload(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadPhotoResponse {
        
        public UploadPhotoResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoServiceChannel : S3Upload.Client.PhotoServiceReference.IPhotoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoServiceClient : System.ServiceModel.ClientBase<S3Upload.Client.PhotoServiceReference.IPhotoService>, S3Upload.Client.PhotoServiceReference.IPhotoService {
        
        public PhotoServiceClient() {
        }
        
        public PhotoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public S3Upload.Client.PhotoServiceReference.PhotoInfo GetPhoto(int id) {
            return base.Channel.GetPhoto(id);
        }
        
        public System.Threading.Tasks.Task<S3Upload.Client.PhotoServiceReference.PhotoInfo> GetPhotoAsync(int id) {
            return base.Channel.GetPhotoAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        S3Upload.Client.PhotoServiceReference.UploadPhotoResponse S3Upload.Client.PhotoServiceReference.IPhotoService.UploadPhoto(S3Upload.Client.PhotoServiceReference.PhotoUpload request) {
            return base.Channel.UploadPhoto(request);
        }
        
        public void UploadPhoto(string FileName, long Length, System.IO.Stream FileByteStream) {
            S3Upload.Client.PhotoServiceReference.PhotoUpload inValue = new S3Upload.Client.PhotoServiceReference.PhotoUpload();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            S3Upload.Client.PhotoServiceReference.UploadPhotoResponse retVal = ((S3Upload.Client.PhotoServiceReference.IPhotoService)(this)).UploadPhoto(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<S3Upload.Client.PhotoServiceReference.UploadPhotoResponse> S3Upload.Client.PhotoServiceReference.IPhotoService.UploadPhotoAsync(S3Upload.Client.PhotoServiceReference.PhotoUpload request) {
            return base.Channel.UploadPhotoAsync(request);
        }
        
        public System.Threading.Tasks.Task<S3Upload.Client.PhotoServiceReference.UploadPhotoResponse> UploadPhotoAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            S3Upload.Client.PhotoServiceReference.PhotoUpload inValue = new S3Upload.Client.PhotoServiceReference.PhotoUpload();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((S3Upload.Client.PhotoServiceReference.IPhotoService)(this)).UploadPhotoAsync(inValue);
        }
    }
}
